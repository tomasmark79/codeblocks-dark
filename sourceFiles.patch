Index: src/plugins/contrib/wxSmith/wxwidgets/properties/wxscolourproperty.cpp
===================================================================
--- src/plugins/contrib/wxSmith/wxwidgets/properties/wxscolourproperty.cpp	(revision 13490)
+++ src/plugins/contrib/wxSmith/wxwidgets/properties/wxscolourproperty.cpp	(working copy)
@@ -478,6 +478,7 @@
 
         wxPropertyGrid* propgrid = GetGrid();
         wxASSERT( propgrid );
+		#define wxPG_FL_IN_HANDLECUSTOMEDITOREVENT 0x00080000
 
         // Must only occur when user triggers event
         if ( !(propgrid->GetInternalFlags() & wxPG_FL_IN_HANDLECUSTOMEDITOREVENT) )
@@ -578,7 +579,7 @@
             int index = paintdata.m_choiceItem;
             value = wxsColourValues[index];
         }
-        else if ( !(m_flags & wxPG_PROP_UNSPECIFIED) )
+        else if ( !(m_flags & static_cast<wxPGPropertyFlags>(wxPG_PROP_UNSPECIFIED) ) )
         {
             value = GetVal().m_type;
         }
Index: src/plugins/contrib/wxSmith/wxwidgets/wxsitemeditorcontent.h
===================================================================
--- src/plugins/contrib/wxSmith/wxwidgets/wxsitemeditorcontent.h	(revision 13490)
+++ src/plugins/contrib/wxSmith/wxwidgets/wxsitemeditorcontent.h	(working copy)
@@ -24,6 +24,7 @@
 #define WXSITEMEDITORCONTENT_H
 
 #include "wxsdrawingwindow.h"
+#include <wx/hashmap.h>
 
 class wxsItemEditorDragAssist;
 class wxsItemResData;
Index: src/sdk/ccmanager.cpp
===================================================================
--- src/sdk/ccmanager.cpp	(revision 13490)
+++ src/sdk/ccmanager.cpp	(working copy)
@@ -565,7 +565,7 @@
 
     wxString items;
     // experimentally, the average length per token seems to be 23 for the main CC plugin
-    items.Alloc(m_AutocompTokens.size() * 20); // TODO: measure performance
+    items.Alloc(m_AutocompTokens.size() * 50); // TODO: measure performance
     for (size_t i = 0; i < m_AutocompTokens.size(); ++i)
     {
         items += m_AutocompTokens[i].displayName;
@@ -574,6 +574,8 @@
         else
             items += wxString::Format("\n%d\r", m_AutocompTokens[i].category);
     }
+	// required by DarkMode due bug in invisible last row(tomasmark79 - 20240308)
+    items += "...\n\r";
     items.RemoveLast();
 
     if (!stc->CallTipActive() && !stc->AutoCompActive())
Index: src/sdk/wxscintilla/src/PlatWX.cpp
===================================================================
--- src/sdk/wxscintilla/src/PlatWX.cpp	(revision 13490)
+++ src/sdk/wxscintilla/src/PlatWX.cpp	(working copy)
@@ -52,7 +52,7 @@
 #define HAVE_DIRECTWRITE_TECHNOLOGY
 #endif
 
-#if wxCHECK_VERSION(3, 1, 0) && defined(__WXMSW__) && !defined(HAVE_DIRECTWRITE_TECHNOLOGY)
+//#if wxCHECK_VERSION(3, 1, 0) && defined(__WXMSW__) && !defined(HAVE_DIRECTWRITE_TECHNOLOGY)
     // You need a build of wxWidgets with enabled Direct2D rendering support.
     // Unfortunately wxWidgets doesn't enable this by default when using non-Visual studio
     // compilers, so you have to enable it manually. To do so you have to edit the file
@@ -60,8 +60,8 @@
     // Change "#define wxUSE_GRAPHICS_DIRECT2D 0" to "#define wxUSE_GRAPHICS_DIRECT2D wxUSE_GRAPHICS_CONTEXT".
     // If you're rebuilding wxWidgets you might also have to edit the file
     // <wxWidgets-root>/lib/gcc_dll/mswu/wx/setup.h.
-    #error "You need to have Direct2D capable wxWidget build to build Code::Blocks. We want to support fonts with ligatures!!!"
-#endif // wxCHECK_VERSION(3, 1, 0) && defined(__WXMSW__) && !defined(HAVE_DIRECTWRITE_TECHNOLOGY)
+//    #error "You need to have Direct2D capable wxWidget build to build Code::Blocks. We want to support fonts with ligatures!!!"
+//#endif // wxCHECK_VERSION(3, 1, 0) && defined(__WXMSW__) && !defined(HAVE_DIRECTWRITE_TECHNOLOGY)
 
 #ifdef HAVE_DIRECTWRITE_TECHNOLOGY
 #include <wx/dcscreen.h>
Index: src/src/app.cpp
===================================================================
--- src/src/app.cpp	(revision 13490)
+++ src/src/app.cpp	(working copy)
@@ -592,6 +592,7 @@
 bool CodeBlocksApp::OnInit()
 {
 #ifdef __WXMSW__
+	MSWEnableDarkMode(DarkMode_Always); // turn on dark mode
     InitCommonControls();
 #endif
 
